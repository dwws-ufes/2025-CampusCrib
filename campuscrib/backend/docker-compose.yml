version: "3.9"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data

volumes:
  esdata:
#   postgres:
#     image: postgres:14
#     environment:
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_DB: registrationdb
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data

#   mongodb:
#     image: mongo:4.4
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo-data:/data/db

#   redis:
#     image: redis:7
#     ports:
#       - "6379:6379"
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.5.3
#     hostname: zookeeper
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000

#   kafka:
#     image: confluentinc/cp-kafka:7.5.3
#     hostname: kafka
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     volumes:
#       - kafka-data:/var/lib/kafka/data
#     depends_on:
#       - zookeeper

#   kong:
#     image: kong:3.6.1
#     container_name: kong
#     environment:
#       KONG_DATABASE: "off"
#       KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_LOG_LEVEL: debug
#     ports:
#       - "8000:8000"
#       - "8001:8001"
#     volumes:
#       - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml:ro
#     depends_on:
#       - registration-service
#       - authentication-service

#   registration-service:
#     build: ./microservices/registration-service
#     ports:
#       - "8080:8080"
#     environment:
#       SERVER_PORT: ${SERVER_PORT}
#       DB_SOURCE: ${DB_SOURCE}
#       DB_USER: ${DB_USER}
#       DB_PASSWORD: ${DB_PASSWORD}
#       CONFIRMATION_SECRET_KEY: ${CONFIRMATION_SECRET_KEY}
#       CONFIRMATION_TOKEN_EXPIRATION: ${CONFIRMATION_TOKEN_EXPIRATION}
#       AUTH_SERVICE_BASE_URL: ${AUTH_SERVICE_BASE_URL}
#       KAFKA_BROKER: ${KAFKA_BROKER}
#       KAFKA_TOPIC_USER_REGISTERED: ${KAFKA_TOPIC_USER_REGISTERED}
#     depends_on:
#       - postgres
#       - kafka

#   authentication-service:
#     build: ./microservices/authentication-service
#     ports:
#       - "8081:8081"
#     environment:
#       MONGODB_URI: ${MONGODB_URI}
#       REDIS_HOST: ${REDIS_HOST}
#       REDIS_PORT: ${REDIS_PORT}
#       JWT_SECRET: ${JWT_SECRET}
#       JWT_ACCESS_TOKEN_EXPIRATION_MILLIS: ${JWT_ACCESS_TOKEN_EXPIRATION_MILLIS}
#       SERVER_PORT: ${SERVER_PORT_AUTH}
#     depends_on:
#       - mongodb
#       - redis

#   notification-service:
#     build: ./microservices/notification-service
#     environment:
#       KAFKA_BROKER: ${KAFKA_BROKER}
#       KAFKA_TOPIC_USER_REGISTERED: ${KAFKA_TOPIC_USER_REGISTERED}
#     depends_on:
#       - kafka

# volumes:
#   postgres-data:
#   mongo-data:
#   kafka-data: